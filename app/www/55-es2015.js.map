{"version":3,"sources":["./node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6H;AAC/F;AACwB;AACsB;;AAE5E;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,2DAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA,QAAQ,2DAAgB;AACxB,uCAAuC,2DAAW;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC,cAAc;AACrD;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB,sBAAsB,kCAAkC,eAAe;AACtH;AACA;AACA;AACA;AACA,0CAA0C,iBAAiB;AAC3D;AACA;AACA,0CAA0C,4BAA4B,uCAAuC,0BAA0B;AACvI;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,aAAa;AACzE,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,WAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,SAAS;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,2DAAW;AAC7C,iCAAiC,2DAAW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,8DAAQ;AACnE,uDAAuD,8DAAQ;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAccAAc,QAAQ,2DAAU,OAAO;AACvC;;AAEA;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAO;AACnB;AACA;AACA;AACA,qBAAqB,2DAAU;AAC/B;AACA;AACA;AACA;AACA;AACA,gBAAgB,2DAAC,CAAC,mDAAI,GAAG,6DAA6D,EAAE,4DAAkB,gBAAgB,wCAAwC,GAAG,EAAE,2DAAC,sBAAsB,UAAU,2DAAC;AACzM;AACA,wBAAwB,eAAe,yBAAyB,yCAAyC,6BAA6B,mBAAmB,kBAAkB,4BAA4B,EAAE,oBAAoB,kBAAkB,mBAAmB,oBAAoB,uBAAuB,wBAAwB,sBAAsB,uBAAuB,mBAAmB,oBAAoB,cAAc,EAAE;AACza;;AAEwH","file":"55-es2015.js","sourcesContent":["import { r as registerInstance, c as createEvent, e as getElement, d as getIonMode, h, H as Host } from './core-ca0488fc.js';\nimport './config-3c7f3790.js';\nimport { e as debounce } from './helpers-46f4a262.js';\nimport { o as openURL, c as createColorClasses } from './theme-18cbe2cc.js';\n\nconst Route = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * Relative path that needs to match in order for this route to apply.\n         *\n         * Accepts paths similar to expressjs so that you can define parameters\n         * in the url /foo/:bar where bar would be available in incoming props.\n         */\n        this.url = '';\n        this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n    }\n    onUpdate(newValue) {\n        this.ionRouteDataChanged.emit(newValue);\n    }\n    onComponentProps(newValue, oldValue) {\n        if (newValue === oldValue) {\n            return;\n        }\n        const keys1 = newValue ? Object.keys(newValue) : [];\n        const keys2 = oldValue ? Object.keys(oldValue) : [];\n        if (keys1.length !== keys2.length) {\n            this.onUpdate(newValue);\n            return;\n        }\n        for (const key of keys1) {\n            if (newValue[key] !== oldValue[key]) {\n                this.onUpdate(newValue);\n                return;\n            }\n        }\n    }\n    connectedCallback() {\n        this.ionRouteDataChanged.emit();\n    }\n    static get watchers() { return {\n        \"url\": [\"onUpdate\"],\n        \"component\": [\"onUpdate\"],\n        \"componentProps\": [\"onComponentProps\"]\n    }; }\n};\n\nconst RouteRedirect = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n    }\n    propDidChange() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    connectedCallback() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    static get watchers() { return {\n        \"from\": [\"propDidChange\"],\n        \"to\": [\"propDidChange\"]\n    }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\r\nconst ROUTER_INTENT_FORWARD = 'forward';\r\nconst ROUTER_INTENT_BACK = 'back';\n\nconst generatePath = (segments) => {\r\n    const path = segments\r\n        .filter(s => s.length > 0)\r\n        .join('/');\r\n    return '/' + path;\r\n};\r\nconst chainToPath = (chain) => {\r\n    const path = [];\r\n    for (const route of chain) {\r\n        for (const segment of route.path) {\r\n            if (segment[0] === ':') {\r\n                const param = route.params && route.params[segment.slice(1)];\r\n                if (!param) {\r\n                    return null;\r\n                }\r\n                path.push(param);\r\n            }\r\n            else if (segment !== '') {\r\n                path.push(segment);\r\n            }\r\n        }\r\n    }\r\n    return path;\r\n};\r\nconst writePath = (history, root, useHash, path, direction, state) => {\r\n    let url = generatePath([\r\n        ...parsePath(root),\r\n        ...path\r\n    ]);\r\n    if (useHash) {\r\n        url = '#' + url;\r\n    }\r\n    if (direction === ROUTER_INTENT_FORWARD) {\r\n        history.pushState(state, '', url);\r\n    }\r\n    else {\r\n        history.replaceState(state, '', url);\r\n    }\r\n};\r\nconst removePrefix = (prefix, path) => {\r\n    if (prefix.length > path.length) {\r\n        return null;\r\n    }\r\n    if (prefix.length <= 1 && prefix[0] === '') {\r\n        return path;\r\n    }\r\n    for (let i = 0; i < prefix.length; i++) {\r\n        if (prefix[i].length > 0 && prefix[i] !== path[i]) {\r\n            return null;\r\n        }\r\n    }\r\n    if (path.length === prefix.length) {\r\n        return [''];\r\n    }\r\n    return path.slice(prefix.length);\r\n};\r\nconst readPath = (loc, root, useHash) => {\r\n    let pathname = loc.pathname;\r\n    if (useHash) {\r\n        const hash = loc.hash;\r\n        pathname = (hash[0] === '#')\r\n            ? hash.slice(1)\r\n            : '';\r\n    }\r\n    const prefix = parsePath(root);\r\n    const path = parsePath(pathname);\r\n    return removePrefix(prefix, path);\r\n};\r\nconst parsePath = (path) => {\r\n    if (path == null) {\r\n        return [''];\r\n    }\r\n    const segments = path.split('/')\r\n        .map(s => s.trim())\r\n        .filter(s => s.length > 0);\r\n    if (segments.length === 0) {\r\n        return [''];\r\n    }\r\n    else {\r\n        return segments;\r\n    }\r\n};\n\nconst printRoutes = (routes) => {\r\n    console.group(`[ion-core] ROUTES[${routes.length}]`);\r\n    for (const chain of routes) {\r\n        const path = [];\r\n        chain.forEach(r => path.push(...r.path));\r\n        const ids = chain.map(r => r.id);\r\n        console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\r\n    }\r\n    console.groupEnd();\r\n};\r\nconst printRedirects = (redirects) => {\r\n    console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\r\n    for (const redirect of redirects) {\r\n        if (redirect.to) {\r\n            console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to)}`, 'font-weight: bold');\r\n        }\r\n    }\r\n    console.groupEnd();\r\n};\n\nconst writeNavState = async (root, chain, direction, index, changed = false) => {\r\n    try {\r\n        // find next navigation outlet in the DOM\r\n        const outlet = searchNavNode(root);\r\n        // make sure we can continue interacting the DOM, otherwise abort\r\n        if (index >= chain.length || !outlet) {\r\n            return changed;\r\n        }\r\n        await outlet.componentOnReady();\r\n        const route = chain[index];\r\n        const result = await outlet.setRouteId(route.id, route.params, direction);\r\n        // if the outlet changed the page, reset navigation to neutral (no direction)\r\n        // this means nested outlets will not animate\r\n        if (result.changed) {\r\n            direction = ROUTER_INTENT_NONE;\r\n            changed = true;\r\n        }\r\n        // recursively set nested outlets\r\n        changed = await writeNavState(result.element, chain, direction, index + 1, changed);\r\n        // once all nested outlets are visible let's make the parent visible too,\r\n        // using markVisible prevents flickering\r\n        if (result.markVisible) {\r\n            await result.markVisible();\r\n        }\r\n        return changed;\r\n    }\r\n    catch (e) {\r\n        console.error(e);\r\n        return false;\r\n    }\r\n};\r\nconst readNavState = async (root) => {\r\n    const ids = [];\r\n    let outlet;\r\n    let node = root;\r\n    // tslint:disable-next-line:no-constant-condition\r\n    while (true) {\r\n        outlet = searchNavNode(node);\r\n        if (outlet) {\r\n            const id = await outlet.getRouteId();\r\n            if (id) {\r\n                node = id.element;\r\n                id.element = undefined;\r\n                ids.push(id);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    return { ids, outlet };\r\n};\r\nconst waitUntilNavNode = () => {\r\n    if (searchNavNode(document.body)) {\r\n        return Promise.resolve();\r\n    }\r\n    return new Promise(resolve => {\r\n        window.addEventListener('ionNavWillLoad', resolve, { once: true });\r\n    });\r\n};\r\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\r\nconst searchNavNode = (root) => {\r\n    if (!root) {\r\n        return undefined;\r\n    }\r\n    if (root.matches(QUERY)) {\r\n        return root;\r\n    }\r\n    const outlet = root.querySelector(QUERY);\r\n    return outlet ? outlet : undefined;\r\n};\n\nconst matchesRedirect = (input, route) => {\r\n    const { from, to } = route;\r\n    if (to === undefined) {\r\n        return false;\r\n    }\r\n    if (from.length > input.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < from.length; i++) {\r\n        const expected = from[i];\r\n        if (expected === '*') {\r\n            return true;\r\n        }\r\n        if (expected !== input[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return from.length === input.length;\r\n};\r\nconst routeRedirect = (path, routes) => {\r\n    return routes.find(route => matchesRedirect(path, route));\r\n};\r\nconst matchesIDs = (ids, chain) => {\r\n    const len = Math.min(ids.length, chain.length);\r\n    let i = 0;\r\n    for (; i < len; i++) {\r\n        if (ids[i].toLowerCase() !== chain[i].id) {\r\n            break;\r\n        }\r\n    }\r\n    return i;\r\n};\r\nconst matchesPath = (inputPath, chain) => {\r\n    const segments = new RouterSegments(inputPath);\r\n    let matchesDefault = false;\r\n    let allparams;\r\n    for (let i = 0; i < chain.length; i++) {\r\n        const path = chain[i].path;\r\n        if (path[0] === '') {\r\n            matchesDefault = true;\r\n        }\r\n        else {\r\n            for (const segment of path) {\r\n                const data = segments.next();\r\n                // data param\r\n                if (segment[0] === ':') {\r\n                    if (data === '') {\r\n                        return null;\r\n                    }\r\n                    allparams = allparams || [];\r\n                    const params = allparams[i] || (allparams[i] = {});\r\n                    params[segment.slice(1)] = data;\r\n                }\r\n                else if (data !== segment) {\r\n                    return null;\r\n                }\r\n            }\r\n            matchesDefault = false;\r\n        }\r\n    }\r\n    const matches = (matchesDefault)\r\n        ? matchesDefault === (segments.next() === '')\r\n        : true;\r\n    if (!matches) {\r\n        return null;\r\n    }\r\n    if (allparams) {\r\n        return chain.map((route, i) => ({\r\n            id: route.id,\r\n            path: route.path,\r\n            params: mergeParams(route.params, allparams[i])\r\n        }));\r\n    }\r\n    return chain;\r\n};\r\nconst mergeParams = (a, b) => {\r\n    if (!a && b) {\r\n        return b;\r\n    }\r\n    else if (a && !b) {\r\n        return a;\r\n    }\r\n    else if (a && b) {\r\n        return Object.assign(Object.assign({}, a), b);\r\n    }\r\n    return undefined;\r\n};\r\nconst routerIDsToChain = (ids, chains) => {\r\n    let match = null;\r\n    let maxMatches = 0;\r\n    const plainIDs = ids.map(i => i.id);\r\n    for (const chain of chains) {\r\n        const score = matchesIDs(plainIDs, chain);\r\n        if (score > maxMatches) {\r\n            match = chain;\r\n            maxMatches = score;\r\n        }\r\n    }\r\n    if (match) {\r\n        return match.map((route, i) => ({\r\n            id: route.id,\r\n            path: route.path,\r\n            params: mergeParams(route.params, ids[i] && ids[i].params)\r\n        }));\r\n    }\r\n    return null;\r\n};\r\nconst routerPathToChain = (path, chains) => {\r\n    let match = null;\r\n    let matches = 0;\r\n    for (const chain of chains) {\r\n        const matchedChain = matchesPath(path, chain);\r\n        if (matchedChain !== null) {\r\n            const score = computePriority(matchedChain);\r\n            if (score > matches) {\r\n                matches = score;\r\n                match = matchedChain;\r\n            }\r\n        }\r\n    }\r\n    return match;\r\n};\r\nconst computePriority = (chain) => {\r\n    let score = 1;\r\n    let level = 1;\r\n    for (const route of chain) {\r\n        for (const path of route.path) {\r\n            if (path[0] === ':') {\r\n                score += Math.pow(1, level);\r\n            }\r\n            else if (path !== '') {\r\n                score += Math.pow(2, level);\r\n            }\r\n            level++;\r\n        }\r\n    }\r\n    return score;\r\n};\r\nclass RouterSegments {\r\n    constructor(path) {\r\n        this.path = path.slice();\r\n    }\r\n    next() {\r\n        if (this.path.length > 0) {\r\n            return this.path.shift();\r\n        }\r\n        return '';\r\n    }\r\n}\n\nconst readRedirects = (root) => {\r\n    return Array.from(root.children)\r\n        .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\r\n        .map(el => {\r\n        const to = readProp(el, 'to');\r\n        return {\r\n            from: parsePath(readProp(el, 'from')),\r\n            to: to == null ? undefined : parsePath(to),\r\n        };\r\n    });\r\n};\r\nconst readRoutes = (root) => {\r\n    return flattenRouterTree(readRouteNodes(root));\r\n};\r\nconst readRouteNodes = (root, node = root) => {\r\n    return Array.from(node.children)\r\n        .filter(el => el.tagName === 'ION-ROUTE' && el.component)\r\n        .map(el => {\r\n        const component = readProp(el, 'component');\r\n        if (component == null) {\r\n            throw new Error('component missing in ion-route');\r\n        }\r\n        return {\r\n            path: parsePath(readProp(el, 'url')),\r\n            id: component.toLowerCase(),\r\n            params: el.componentProps,\r\n            children: readRouteNodes(root, el)\r\n        };\r\n    });\r\n};\r\nconst readProp = (el, prop) => {\r\n    if (prop in el) {\r\n        return el[prop];\r\n    }\r\n    if (el.hasAttribute(prop)) {\r\n        return el.getAttribute(prop);\r\n    }\r\n    return null;\r\n};\r\nconst flattenRouterTree = (nodes) => {\r\n    const routes = [];\r\n    for (const node of nodes) {\r\n        flattenNode([], routes, node);\r\n    }\r\n    return routes;\r\n};\r\nconst flattenNode = (chain, routes, node) => {\r\n    const s = chain.slice();\r\n    s.push({\r\n        id: node.id,\r\n        path: node.path,\r\n        params: node.params\r\n    });\r\n    if (node.children.length === 0) {\r\n        routes.push(s);\r\n        return;\r\n    }\r\n    for (const sub of node.children) {\r\n        flattenNode(s, routes, sub);\r\n    }\r\n};\n\nconst Router = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.previousPath = null;\n        this.busy = false;\n        this.state = 0;\n        this.lastState = 0;\n        /**\n         * By default `ion-router` will match the routes at the root path (\"/\").\n         * That can be changed when\n         *\n         */\n        this.root = '/';\n        /**\n         * The router can work in two \"modes\":\n         * - With hash: `/index.html#/path/to/page`\n         * - Without hash: `/path/to/page`\n         *\n         * Using one or another might depend in the requirements of your app and/or where it's deployed.\n         *\n         * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n         * requires additional server-side configuration in order to properly work.\n         *\n         * On the otherside hash-navigation is much easier to deploy, it even works over the file protocol.\n         *\n         * By default, this property is `true`, change to `false` to allow hash-less URLs.\n         */\n        this.useHash = true;\n        this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n        this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    }\n    async componentWillLoad() {\n        console.debug('[ion-router] router will load');\n        await waitUntilNavNode();\n        console.debug('[ion-router] found nav');\n        await this.onRoutesChanged();\n    }\n    componentDidLoad() {\n        window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n        window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n    }\n    onPopState() {\n        const direction = this.historyDirection();\n        const path = this.getPath();\n        console.debug('[ion-router] URL changed -> update nav', path, direction);\n        return this.writeNavStateRoot(path, direction);\n    }\n    onBackButton(ev) {\n        ev.detail.register(0, () => this.back());\n    }\n    /**\n     * Navigate to the specified URL.\n     *\n     * @param url The url to navigate to.\n     * @param direction The direction of the animation. Defaults to `\"forward\"`.\n     */\n    push(url, direction = 'forward') {\n        if (url.startsWith('.')) {\n            url = (new URL(url, window.location.href)).pathname;\n        }\n        console.debug('[ion-router] URL pushed -> updating nav', url, direction);\n        const path = parsePath(url);\n        this.setPath(path, direction);\n        return this.writeNavStateRoot(path, direction);\n    }\n    /**\n     * Go back to previous page in the window.history.\n     */\n    back() {\n        window.history.back();\n        return Promise.resolve(this.waitPromise);\n    }\n    /** @internal */\n    async printDebug() {\n        console.debug('CURRENT PATH', this.getPath());\n        console.debug('PREVIOUS PATH', this.previousPath);\n        printRoutes(readRoutes(this.el));\n        printRedirects(readRedirects(this.el));\n    }\n    /** @internal */\n    async navChanged(direction) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, navChanged was cancelled');\n            return false;\n        }\n        const { ids, outlet } = await readNavState(window.document.body);\n        const routes = readRoutes(this.el);\n        const chain = routerIDsToChain(ids, routes);\n        if (!chain) {\n            console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n            return false;\n        }\n        const path = chainToPath(chain);\n        if (!path) {\n            console.warn('[ion-router] router could not match path because some required param is missing');\n            return false;\n        }\n        console.debug('[ion-router] nav changed -> update URL', ids, path);\n        this.setPath(path, direction);\n        await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\n        return true;\n    }\n    onRedirectChanged() {\n        const path = this.getPath();\n        if (path && routeRedirect(path, readRedirects(this.el))) {\n            this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\n        }\n    }\n    onRoutesChanged() {\n        return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\n    }\n    historyDirection() {\n        const win = window;\n        if (win.history.state === null) {\n            this.state++;\n            win.history.replaceState(this.state, win.document.title, win.document.location && win.document.location.href);\n        }\n        const state = win.history.state;\n        const lastState = this.lastState;\n        this.lastState = state;\n        if (state > lastState) {\n            return ROUTER_INTENT_FORWARD;\n        }\n        else if (state < lastState) {\n            return ROUTER_INTENT_BACK;\n        }\n        else {\n            return ROUTER_INTENT_NONE;\n        }\n    }\n    async writeNavStateRoot(path, direction) {\n        if (!path) {\n            console.error('[ion-router] URL is not part of the routing set');\n            return false;\n        }\n        // lookup redirect rule\n        const redirects = readRedirects(this.el);\n        const redirect = routeRedirect(path, redirects);\n        let redirectFrom = null;\n        if (redirect) {\n            this.setPath(redirect.to, direction);\n            redirectFrom = redirect.from;\n            path = redirect.to;\n        }\n        // lookup route chain\n        const routes = readRoutes(this.el);\n        const chain = routerPathToChain(path, routes);\n        if (!chain) {\n            console.error('[ion-router] the path does not match any route');\n            return false;\n        }\n        // write DOM give\n        return this.safeWriteNavState(document.body, chain, direction, path, redirectFrom);\n    }\n    async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0) {\n        const unlock = await this.lock();\n        let changed = false;\n        try {\n            changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index);\n        }\n        catch (e) {\n            console.error(e);\n        }\n        unlock();\n        return changed;\n    }\n    async lock() {\n        const p = this.waitPromise;\n        let resolve;\n        this.waitPromise = new Promise(r => resolve = r);\n        if (p !== undefined) {\n            await p;\n        }\n        return resolve;\n    }\n    async writeNavState(node, chain, direction, path, redirectFrom, index = 0) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, transition was cancelled');\n            return false;\n        }\n        this.busy = true;\n        // generate route event and emit will change\n        const routeEvent = this.routeChangeEvent(path, redirectFrom);\n        if (routeEvent) {\n            this.ionRouteWillChange.emit(routeEvent);\n        }\n        const changed = await writeNavState(node, chain, direction, index);\n        this.busy = false;\n        if (changed) {\n            console.debug('[ion-router] route changed', path);\n        }\n        // emit did change\n        if (routeEvent) {\n            this.ionRouteDidChange.emit(routeEvent);\n        }\n        return changed;\n    }\n    setPath(path, direction) {\n        this.state++;\n        writePath(window.history, this.root, this.useHash, path, direction, this.state);\n    }\n    getPath() {\n        return readPath(window.location, this.root, this.useHash);\n    }\n    routeChangeEvent(path, redirectFromPath) {\n        const from = this.previousPath;\n        const to = generatePath(path);\n        this.previousPath = to;\n        if (to === from) {\n            return null;\n        }\n        const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\n        return {\n            from,\n            redirectedFrom,\n            to,\n        };\n    }\n    get el() { return getElement(this); }\n};\n\nconst RouterLink = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * When using a router, it specifies the transition direction when navigating to\n         * another page using `href`.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = (ev) => {\n            openURL(this.href, ev, this.routerDirection);\n        };\n    }\n    render() {\n        const mode = getIonMode(this);\n        const attrs = {\n            href: this.href,\n            rel: this.rel,\n            target: this.target\n        };\n        return (h(Host, { onClick: this.onClick, class: Object.assign(Object.assign({}, createColorClasses(this.color)), { [mode]: true, 'ion-activatable': true }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n    }\n    static get style() { return \":host{--background:transparent;--color:var(--ion-color-primary,#3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\"; }\n};\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n"],"sourceRoot":""}